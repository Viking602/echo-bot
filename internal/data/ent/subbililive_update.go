// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"echo/internal/data/ent/predicate"
	"echo/internal/data/ent/subbililive"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubBiliLiveUpdate is the builder for updating SubBiliLive entities.
type SubBiliLiveUpdate struct {
	config
	hooks    []Hook
	mutation *SubBiliLiveMutation
}

// Where appends a list predicates to the SubBiliLiveUpdate builder.
func (sblu *SubBiliLiveUpdate) Where(ps ...predicate.SubBiliLive) *SubBiliLiveUpdate {
	sblu.mutation.Where(ps...)
	return sblu
}

// SetRoomID sets the "room_id" field.
func (sblu *SubBiliLiveUpdate) SetRoomID(i int64) *SubBiliLiveUpdate {
	sblu.mutation.ResetRoomID()
	sblu.mutation.SetRoomID(i)
	return sblu
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (sblu *SubBiliLiveUpdate) SetNillableRoomID(i *int64) *SubBiliLiveUpdate {
	if i != nil {
		sblu.SetRoomID(*i)
	}
	return sblu
}

// AddRoomID adds i to the "room_id" field.
func (sblu *SubBiliLiveUpdate) AddRoomID(i int64) *SubBiliLiveUpdate {
	sblu.mutation.AddRoomID(i)
	return sblu
}

// SetLiveState sets the "live_state" field.
func (sblu *SubBiliLiveUpdate) SetLiveState(i int64) *SubBiliLiveUpdate {
	sblu.mutation.ResetLiveState()
	sblu.mutation.SetLiveState(i)
	return sblu
}

// SetNillableLiveState sets the "live_state" field if the given value is not nil.
func (sblu *SubBiliLiveUpdate) SetNillableLiveState(i *int64) *SubBiliLiveUpdate {
	if i != nil {
		sblu.SetLiveState(*i)
	}
	return sblu
}

// AddLiveState adds i to the "live_state" field.
func (sblu *SubBiliLiveUpdate) AddLiveState(i int64) *SubBiliLiveUpdate {
	sblu.mutation.AddLiveState(i)
	return sblu
}

// SetLiveStartTime sets the "live_start_time" field.
func (sblu *SubBiliLiveUpdate) SetLiveStartTime(t time.Time) *SubBiliLiveUpdate {
	sblu.mutation.SetLiveStartTime(t)
	return sblu
}

// SetNillableLiveStartTime sets the "live_start_time" field if the given value is not nil.
func (sblu *SubBiliLiveUpdate) SetNillableLiveStartTime(t *time.Time) *SubBiliLiveUpdate {
	if t != nil {
		sblu.SetLiveStartTime(*t)
	}
	return sblu
}

// SetLiveEndTime sets the "live_end_time" field.
func (sblu *SubBiliLiveUpdate) SetLiveEndTime(t time.Time) *SubBiliLiveUpdate {
	sblu.mutation.SetLiveEndTime(t)
	return sblu
}

// SetNillableLiveEndTime sets the "live_end_time" field if the given value is not nil.
func (sblu *SubBiliLiveUpdate) SetNillableLiveEndTime(t *time.Time) *SubBiliLiveUpdate {
	if t != nil {
		sblu.SetLiveEndTime(*t)
	}
	return sblu
}

// SetCreateTime sets the "create_time" field.
func (sblu *SubBiliLiveUpdate) SetCreateTime(t time.Time) *SubBiliLiveUpdate {
	sblu.mutation.SetCreateTime(t)
	return sblu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sblu *SubBiliLiveUpdate) SetNillableCreateTime(t *time.Time) *SubBiliLiveUpdate {
	if t != nil {
		sblu.SetCreateTime(*t)
	}
	return sblu
}

// SetUpdateTime sets the "update_time" field.
func (sblu *SubBiliLiveUpdate) SetUpdateTime(t time.Time) *SubBiliLiveUpdate {
	sblu.mutation.SetUpdateTime(t)
	return sblu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sblu *SubBiliLiveUpdate) SetNillableUpdateTime(t *time.Time) *SubBiliLiveUpdate {
	if t != nil {
		sblu.SetUpdateTime(*t)
	}
	return sblu
}

// Mutation returns the SubBiliLiveMutation object of the builder.
func (sblu *SubBiliLiveUpdate) Mutation() *SubBiliLiveMutation {
	return sblu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sblu *SubBiliLiveUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sblu.sqlSave, sblu.mutation, sblu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sblu *SubBiliLiveUpdate) SaveX(ctx context.Context) int {
	affected, err := sblu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sblu *SubBiliLiveUpdate) Exec(ctx context.Context) error {
	_, err := sblu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sblu *SubBiliLiveUpdate) ExecX(ctx context.Context) {
	if err := sblu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sblu *SubBiliLiveUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(subbililive.Table, subbililive.Columns, sqlgraph.NewFieldSpec(subbililive.FieldID, field.TypeInt64))
	if ps := sblu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sblu.mutation.RoomID(); ok {
		_spec.SetField(subbililive.FieldRoomID, field.TypeInt64, value)
	}
	if value, ok := sblu.mutation.AddedRoomID(); ok {
		_spec.AddField(subbililive.FieldRoomID, field.TypeInt64, value)
	}
	if value, ok := sblu.mutation.LiveState(); ok {
		_spec.SetField(subbililive.FieldLiveState, field.TypeInt64, value)
	}
	if value, ok := sblu.mutation.AddedLiveState(); ok {
		_spec.AddField(subbililive.FieldLiveState, field.TypeInt64, value)
	}
	if value, ok := sblu.mutation.LiveStartTime(); ok {
		_spec.SetField(subbililive.FieldLiveStartTime, field.TypeTime, value)
	}
	if value, ok := sblu.mutation.LiveEndTime(); ok {
		_spec.SetField(subbililive.FieldLiveEndTime, field.TypeTime, value)
	}
	if value, ok := sblu.mutation.CreateTime(); ok {
		_spec.SetField(subbililive.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := sblu.mutation.UpdateTime(); ok {
		_spec.SetField(subbililive.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sblu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subbililive.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sblu.mutation.done = true
	return n, nil
}

// SubBiliLiveUpdateOne is the builder for updating a single SubBiliLive entity.
type SubBiliLiveUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubBiliLiveMutation
}

// SetRoomID sets the "room_id" field.
func (sbluo *SubBiliLiveUpdateOne) SetRoomID(i int64) *SubBiliLiveUpdateOne {
	sbluo.mutation.ResetRoomID()
	sbluo.mutation.SetRoomID(i)
	return sbluo
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (sbluo *SubBiliLiveUpdateOne) SetNillableRoomID(i *int64) *SubBiliLiveUpdateOne {
	if i != nil {
		sbluo.SetRoomID(*i)
	}
	return sbluo
}

// AddRoomID adds i to the "room_id" field.
func (sbluo *SubBiliLiveUpdateOne) AddRoomID(i int64) *SubBiliLiveUpdateOne {
	sbluo.mutation.AddRoomID(i)
	return sbluo
}

// SetLiveState sets the "live_state" field.
func (sbluo *SubBiliLiveUpdateOne) SetLiveState(i int64) *SubBiliLiveUpdateOne {
	sbluo.mutation.ResetLiveState()
	sbluo.mutation.SetLiveState(i)
	return sbluo
}

// SetNillableLiveState sets the "live_state" field if the given value is not nil.
func (sbluo *SubBiliLiveUpdateOne) SetNillableLiveState(i *int64) *SubBiliLiveUpdateOne {
	if i != nil {
		sbluo.SetLiveState(*i)
	}
	return sbluo
}

// AddLiveState adds i to the "live_state" field.
func (sbluo *SubBiliLiveUpdateOne) AddLiveState(i int64) *SubBiliLiveUpdateOne {
	sbluo.mutation.AddLiveState(i)
	return sbluo
}

// SetLiveStartTime sets the "live_start_time" field.
func (sbluo *SubBiliLiveUpdateOne) SetLiveStartTime(t time.Time) *SubBiliLiveUpdateOne {
	sbluo.mutation.SetLiveStartTime(t)
	return sbluo
}

// SetNillableLiveStartTime sets the "live_start_time" field if the given value is not nil.
func (sbluo *SubBiliLiveUpdateOne) SetNillableLiveStartTime(t *time.Time) *SubBiliLiveUpdateOne {
	if t != nil {
		sbluo.SetLiveStartTime(*t)
	}
	return sbluo
}

// SetLiveEndTime sets the "live_end_time" field.
func (sbluo *SubBiliLiveUpdateOne) SetLiveEndTime(t time.Time) *SubBiliLiveUpdateOne {
	sbluo.mutation.SetLiveEndTime(t)
	return sbluo
}

// SetNillableLiveEndTime sets the "live_end_time" field if the given value is not nil.
func (sbluo *SubBiliLiveUpdateOne) SetNillableLiveEndTime(t *time.Time) *SubBiliLiveUpdateOne {
	if t != nil {
		sbluo.SetLiveEndTime(*t)
	}
	return sbluo
}

// SetCreateTime sets the "create_time" field.
func (sbluo *SubBiliLiveUpdateOne) SetCreateTime(t time.Time) *SubBiliLiveUpdateOne {
	sbluo.mutation.SetCreateTime(t)
	return sbluo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (sbluo *SubBiliLiveUpdateOne) SetNillableCreateTime(t *time.Time) *SubBiliLiveUpdateOne {
	if t != nil {
		sbluo.SetCreateTime(*t)
	}
	return sbluo
}

// SetUpdateTime sets the "update_time" field.
func (sbluo *SubBiliLiveUpdateOne) SetUpdateTime(t time.Time) *SubBiliLiveUpdateOne {
	sbluo.mutation.SetUpdateTime(t)
	return sbluo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (sbluo *SubBiliLiveUpdateOne) SetNillableUpdateTime(t *time.Time) *SubBiliLiveUpdateOne {
	if t != nil {
		sbluo.SetUpdateTime(*t)
	}
	return sbluo
}

// Mutation returns the SubBiliLiveMutation object of the builder.
func (sbluo *SubBiliLiveUpdateOne) Mutation() *SubBiliLiveMutation {
	return sbluo.mutation
}

// Where appends a list predicates to the SubBiliLiveUpdate builder.
func (sbluo *SubBiliLiveUpdateOne) Where(ps ...predicate.SubBiliLive) *SubBiliLiveUpdateOne {
	sbluo.mutation.Where(ps...)
	return sbluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sbluo *SubBiliLiveUpdateOne) Select(field string, fields ...string) *SubBiliLiveUpdateOne {
	sbluo.fields = append([]string{field}, fields...)
	return sbluo
}

// Save executes the query and returns the updated SubBiliLive entity.
func (sbluo *SubBiliLiveUpdateOne) Save(ctx context.Context) (*SubBiliLive, error) {
	return withHooks(ctx, sbluo.sqlSave, sbluo.mutation, sbluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sbluo *SubBiliLiveUpdateOne) SaveX(ctx context.Context) *SubBiliLive {
	node, err := sbluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sbluo *SubBiliLiveUpdateOne) Exec(ctx context.Context) error {
	_, err := sbluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbluo *SubBiliLiveUpdateOne) ExecX(ctx context.Context) {
	if err := sbluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sbluo *SubBiliLiveUpdateOne) sqlSave(ctx context.Context) (_node *SubBiliLive, err error) {
	_spec := sqlgraph.NewUpdateSpec(subbililive.Table, subbililive.Columns, sqlgraph.NewFieldSpec(subbililive.FieldID, field.TypeInt64))
	id, ok := sbluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubBiliLive.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sbluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subbililive.FieldID)
		for _, f := range fields {
			if !subbililive.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subbililive.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sbluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sbluo.mutation.RoomID(); ok {
		_spec.SetField(subbililive.FieldRoomID, field.TypeInt64, value)
	}
	if value, ok := sbluo.mutation.AddedRoomID(); ok {
		_spec.AddField(subbililive.FieldRoomID, field.TypeInt64, value)
	}
	if value, ok := sbluo.mutation.LiveState(); ok {
		_spec.SetField(subbililive.FieldLiveState, field.TypeInt64, value)
	}
	if value, ok := sbluo.mutation.AddedLiveState(); ok {
		_spec.AddField(subbililive.FieldLiveState, field.TypeInt64, value)
	}
	if value, ok := sbluo.mutation.LiveStartTime(); ok {
		_spec.SetField(subbililive.FieldLiveStartTime, field.TypeTime, value)
	}
	if value, ok := sbluo.mutation.LiveEndTime(); ok {
		_spec.SetField(subbililive.FieldLiveEndTime, field.TypeTime, value)
	}
	if value, ok := sbluo.mutation.CreateTime(); ok {
		_spec.SetField(subbililive.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := sbluo.mutation.UpdateTime(); ok {
		_spec.SetField(subbililive.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &SubBiliLive{config: sbluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sbluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subbililive.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sbluo.mutation.done = true
	return _node, nil
}
