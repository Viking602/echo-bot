// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"echo/internal/data/ent/bililivesetting"
	"echo/internal/data/ent/bot"
	"echo/internal/data/ent/predicate"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBiliLiveSetting = "BiliLiveSetting"
	TypeBot             = "Bot"
)

// BiliLiveSettingMutation represents an operation that mutates the BiliLiveSetting nodes in the graph.
type BiliLiveSettingMutation struct {
	config
	op              Op
	typ             string
	id              *int64
	room_id         *int64
	addroom_id      *int64
	live_state      *int64
	addlive_state   *int64
	live_start_time *time.Time
	live_end_time   *time.Time
	create_time     *time.Time
	update_time     *time.Time
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*BiliLiveSetting, error)
	predicates      []predicate.BiliLiveSetting
}

var _ ent.Mutation = (*BiliLiveSettingMutation)(nil)

// bililivesettingOption allows management of the mutation configuration using functional options.
type bililivesettingOption func(*BiliLiveSettingMutation)

// newBiliLiveSettingMutation creates new mutation for the BiliLiveSetting entity.
func newBiliLiveSettingMutation(c config, op Op, opts ...bililivesettingOption) *BiliLiveSettingMutation {
	m := &BiliLiveSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeBiliLiveSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBiliLiveSettingID sets the ID field of the mutation.
func withBiliLiveSettingID(id int64) bililivesettingOption {
	return func(m *BiliLiveSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *BiliLiveSetting
		)
		m.oldValue = func(ctx context.Context) (*BiliLiveSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BiliLiveSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBiliLiveSetting sets the old BiliLiveSetting of the mutation.
func withBiliLiveSetting(node *BiliLiveSetting) bililivesettingOption {
	return func(m *BiliLiveSettingMutation) {
		m.oldValue = func(context.Context) (*BiliLiveSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BiliLiveSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BiliLiveSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of BiliLiveSetting entities.
func (m *BiliLiveSettingMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BiliLiveSettingMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BiliLiveSettingMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BiliLiveSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRoomID sets the "room_id" field.
func (m *BiliLiveSettingMutation) SetRoomID(i int64) {
	m.room_id = &i
	m.addroom_id = nil
}

// RoomID returns the value of the "room_id" field in the mutation.
func (m *BiliLiveSettingMutation) RoomID() (r int64, exists bool) {
	v := m.room_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRoomID returns the old "room_id" field's value of the BiliLiveSetting entity.
// If the BiliLiveSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BiliLiveSettingMutation) OldRoomID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoomID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoomID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoomID: %w", err)
	}
	return oldValue.RoomID, nil
}

// AddRoomID adds i to the "room_id" field.
func (m *BiliLiveSettingMutation) AddRoomID(i int64) {
	if m.addroom_id != nil {
		*m.addroom_id += i
	} else {
		m.addroom_id = &i
	}
}

// AddedRoomID returns the value that was added to the "room_id" field in this mutation.
func (m *BiliLiveSettingMutation) AddedRoomID() (r int64, exists bool) {
	v := m.addroom_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetRoomID resets all changes to the "room_id" field.
func (m *BiliLiveSettingMutation) ResetRoomID() {
	m.room_id = nil
	m.addroom_id = nil
}

// SetLiveState sets the "live_state" field.
func (m *BiliLiveSettingMutation) SetLiveState(i int64) {
	m.live_state = &i
	m.addlive_state = nil
}

// LiveState returns the value of the "live_state" field in the mutation.
func (m *BiliLiveSettingMutation) LiveState() (r int64, exists bool) {
	v := m.live_state
	if v == nil {
		return
	}
	return *v, true
}

// OldLiveState returns the old "live_state" field's value of the BiliLiveSetting entity.
// If the BiliLiveSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BiliLiveSettingMutation) OldLiveState(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLiveState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLiveState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiveState: %w", err)
	}
	return oldValue.LiveState, nil
}

// AddLiveState adds i to the "live_state" field.
func (m *BiliLiveSettingMutation) AddLiveState(i int64) {
	if m.addlive_state != nil {
		*m.addlive_state += i
	} else {
		m.addlive_state = &i
	}
}

// AddedLiveState returns the value that was added to the "live_state" field in this mutation.
func (m *BiliLiveSettingMutation) AddedLiveState() (r int64, exists bool) {
	v := m.addlive_state
	if v == nil {
		return
	}
	return *v, true
}

// ResetLiveState resets all changes to the "live_state" field.
func (m *BiliLiveSettingMutation) ResetLiveState() {
	m.live_state = nil
	m.addlive_state = nil
}

// SetLiveStartTime sets the "live_start_time" field.
func (m *BiliLiveSettingMutation) SetLiveStartTime(t time.Time) {
	m.live_start_time = &t
}

// LiveStartTime returns the value of the "live_start_time" field in the mutation.
func (m *BiliLiveSettingMutation) LiveStartTime() (r time.Time, exists bool) {
	v := m.live_start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLiveStartTime returns the old "live_start_time" field's value of the BiliLiveSetting entity.
// If the BiliLiveSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BiliLiveSettingMutation) OldLiveStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLiveStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLiveStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiveStartTime: %w", err)
	}
	return oldValue.LiveStartTime, nil
}

// ResetLiveStartTime resets all changes to the "live_start_time" field.
func (m *BiliLiveSettingMutation) ResetLiveStartTime() {
	m.live_start_time = nil
}

// SetLiveEndTime sets the "live_end_time" field.
func (m *BiliLiveSettingMutation) SetLiveEndTime(t time.Time) {
	m.live_end_time = &t
}

// LiveEndTime returns the value of the "live_end_time" field in the mutation.
func (m *BiliLiveSettingMutation) LiveEndTime() (r time.Time, exists bool) {
	v := m.live_end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLiveEndTime returns the old "live_end_time" field's value of the BiliLiveSetting entity.
// If the BiliLiveSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BiliLiveSettingMutation) OldLiveEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLiveEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLiveEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiveEndTime: %w", err)
	}
	return oldValue.LiveEndTime, nil
}

// ResetLiveEndTime resets all changes to the "live_end_time" field.
func (m *BiliLiveSettingMutation) ResetLiveEndTime() {
	m.live_end_time = nil
}

// SetCreateTime sets the "create_time" field.
func (m *BiliLiveSettingMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *BiliLiveSettingMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the BiliLiveSetting entity.
// If the BiliLiveSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BiliLiveSettingMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *BiliLiveSettingMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *BiliLiveSettingMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *BiliLiveSettingMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the BiliLiveSetting entity.
// If the BiliLiveSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BiliLiveSettingMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *BiliLiveSettingMutation) ResetUpdateTime() {
	m.update_time = nil
}

// Where appends a list predicates to the BiliLiveSettingMutation builder.
func (m *BiliLiveSettingMutation) Where(ps ...predicate.BiliLiveSetting) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BiliLiveSettingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BiliLiveSettingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BiliLiveSetting, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BiliLiveSettingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BiliLiveSettingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BiliLiveSetting).
func (m *BiliLiveSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BiliLiveSettingMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.room_id != nil {
		fields = append(fields, bililivesetting.FieldRoomID)
	}
	if m.live_state != nil {
		fields = append(fields, bililivesetting.FieldLiveState)
	}
	if m.live_start_time != nil {
		fields = append(fields, bililivesetting.FieldLiveStartTime)
	}
	if m.live_end_time != nil {
		fields = append(fields, bililivesetting.FieldLiveEndTime)
	}
	if m.create_time != nil {
		fields = append(fields, bililivesetting.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, bililivesetting.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BiliLiveSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bililivesetting.FieldRoomID:
		return m.RoomID()
	case bililivesetting.FieldLiveState:
		return m.LiveState()
	case bililivesetting.FieldLiveStartTime:
		return m.LiveStartTime()
	case bililivesetting.FieldLiveEndTime:
		return m.LiveEndTime()
	case bililivesetting.FieldCreateTime:
		return m.CreateTime()
	case bililivesetting.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BiliLiveSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bililivesetting.FieldRoomID:
		return m.OldRoomID(ctx)
	case bililivesetting.FieldLiveState:
		return m.OldLiveState(ctx)
	case bililivesetting.FieldLiveStartTime:
		return m.OldLiveStartTime(ctx)
	case bililivesetting.FieldLiveEndTime:
		return m.OldLiveEndTime(ctx)
	case bililivesetting.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case bililivesetting.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown BiliLiveSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BiliLiveSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bililivesetting.FieldRoomID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoomID(v)
		return nil
	case bililivesetting.FieldLiveState:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiveState(v)
		return nil
	case bililivesetting.FieldLiveStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiveStartTime(v)
		return nil
	case bililivesetting.FieldLiveEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiveEndTime(v)
		return nil
	case bililivesetting.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case bililivesetting.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown BiliLiveSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BiliLiveSettingMutation) AddedFields() []string {
	var fields []string
	if m.addroom_id != nil {
		fields = append(fields, bililivesetting.FieldRoomID)
	}
	if m.addlive_state != nil {
		fields = append(fields, bililivesetting.FieldLiveState)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BiliLiveSettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case bililivesetting.FieldRoomID:
		return m.AddedRoomID()
	case bililivesetting.FieldLiveState:
		return m.AddedLiveState()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BiliLiveSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case bililivesetting.FieldRoomID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoomID(v)
		return nil
	case bililivesetting.FieldLiveState:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLiveState(v)
		return nil
	}
	return fmt.Errorf("unknown BiliLiveSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BiliLiveSettingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BiliLiveSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BiliLiveSettingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BiliLiveSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BiliLiveSettingMutation) ResetField(name string) error {
	switch name {
	case bililivesetting.FieldRoomID:
		m.ResetRoomID()
		return nil
	case bililivesetting.FieldLiveState:
		m.ResetLiveState()
		return nil
	case bililivesetting.FieldLiveStartTime:
		m.ResetLiveStartTime()
		return nil
	case bililivesetting.FieldLiveEndTime:
		m.ResetLiveEndTime()
		return nil
	case bililivesetting.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case bililivesetting.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown BiliLiveSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BiliLiveSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BiliLiveSettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BiliLiveSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BiliLiveSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BiliLiveSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BiliLiveSettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BiliLiveSettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown BiliLiveSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BiliLiveSettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown BiliLiveSetting edge %s", name)
}

// BotMutation represents an operation that mutates the Bot nodes in the graph.
type BotMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	bot_name      *string
	status        *int
	addstatus     *int
	create_time   *time.Time
	update_time   *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Bot, error)
	predicates    []predicate.Bot
}

var _ ent.Mutation = (*BotMutation)(nil)

// botOption allows management of the mutation configuration using functional options.
type botOption func(*BotMutation)

// newBotMutation creates new mutation for the Bot entity.
func newBotMutation(c config, op Op, opts ...botOption) *BotMutation {
	m := &BotMutation{
		config:        c,
		op:            op,
		typ:           TypeBot,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBotID sets the ID field of the mutation.
func withBotID(id int64) botOption {
	return func(m *BotMutation) {
		var (
			err   error
			once  sync.Once
			value *Bot
		)
		m.oldValue = func(ctx context.Context) (*Bot, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Bot.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBot sets the old Bot of the mutation.
func withBot(node *Bot) botOption {
	return func(m *BotMutation) {
		m.oldValue = func(context.Context) (*Bot, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BotMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BotMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Bot entities.
func (m *BotMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BotMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BotMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Bot.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetBotName sets the "bot_name" field.
func (m *BotMutation) SetBotName(s string) {
	m.bot_name = &s
}

// BotName returns the value of the "bot_name" field in the mutation.
func (m *BotMutation) BotName() (r string, exists bool) {
	v := m.bot_name
	if v == nil {
		return
	}
	return *v, true
}

// OldBotName returns the old "bot_name" field's value of the Bot entity.
// If the Bot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BotMutation) OldBotName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBotName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBotName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBotName: %w", err)
	}
	return oldValue.BotName, nil
}

// ResetBotName resets all changes to the "bot_name" field.
func (m *BotMutation) ResetBotName() {
	m.bot_name = nil
}

// SetStatus sets the "status" field.
func (m *BotMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *BotMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Bot entity.
// If the Bot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BotMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *BotMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *BotMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *BotMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetCreateTime sets the "create_time" field.
func (m *BotMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *BotMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Bot entity.
// If the Bot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BotMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *BotMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *BotMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *BotMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Bot entity.
// If the Bot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BotMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *BotMutation) ResetUpdateTime() {
	m.update_time = nil
}

// Where appends a list predicates to the BotMutation builder.
func (m *BotMutation) Where(ps ...predicate.Bot) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BotMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BotMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Bot, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BotMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BotMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Bot).
func (m *BotMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BotMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.bot_name != nil {
		fields = append(fields, bot.FieldBotName)
	}
	if m.status != nil {
		fields = append(fields, bot.FieldStatus)
	}
	if m.create_time != nil {
		fields = append(fields, bot.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, bot.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BotMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bot.FieldBotName:
		return m.BotName()
	case bot.FieldStatus:
		return m.Status()
	case bot.FieldCreateTime:
		return m.CreateTime()
	case bot.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BotMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bot.FieldBotName:
		return m.OldBotName(ctx)
	case bot.FieldStatus:
		return m.OldStatus(ctx)
	case bot.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case bot.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown Bot field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BotMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bot.FieldBotName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBotName(v)
		return nil
	case bot.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case bot.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case bot.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Bot field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BotMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, bot.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BotMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case bot.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BotMutation) AddField(name string, value ent.Value) error {
	switch name {
	case bot.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Bot numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BotMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BotMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BotMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Bot nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BotMutation) ResetField(name string) error {
	switch name {
	case bot.FieldBotName:
		m.ResetBotName()
		return nil
	case bot.FieldStatus:
		m.ResetStatus()
		return nil
	case bot.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case bot.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown Bot field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BotMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BotMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BotMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BotMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BotMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BotMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BotMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Bot unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BotMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Bot edge %s", name)
}
