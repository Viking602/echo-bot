// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"echo/internal/data/ent/bot"
	"echo/internal/data/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BotUpdate is the builder for updating Bot entities.
type BotUpdate struct {
	config
	hooks    []Hook
	mutation *BotMutation
}

// Where appends a list predicates to the BotUpdate builder.
func (bu *BotUpdate) Where(ps ...predicate.Bot) *BotUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetBotName sets the "bot_name" field.
func (bu *BotUpdate) SetBotName(s string) *BotUpdate {
	bu.mutation.SetBotName(s)
	return bu
}

// SetNillableBotName sets the "bot_name" field if the given value is not nil.
func (bu *BotUpdate) SetNillableBotName(s *string) *BotUpdate {
	if s != nil {
		bu.SetBotName(*s)
	}
	return bu
}

// SetStatus sets the "status" field.
func (bu *BotUpdate) SetStatus(i int) *BotUpdate {
	bu.mutation.ResetStatus()
	bu.mutation.SetStatus(i)
	return bu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bu *BotUpdate) SetNillableStatus(i *int) *BotUpdate {
	if i != nil {
		bu.SetStatus(*i)
	}
	return bu
}

// AddStatus adds i to the "status" field.
func (bu *BotUpdate) AddStatus(i int) *BotUpdate {
	bu.mutation.AddStatus(i)
	return bu
}

// SetCreateTime sets the "create_time" field.
func (bu *BotUpdate) SetCreateTime(t time.Time) *BotUpdate {
	bu.mutation.SetCreateTime(t)
	return bu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bu *BotUpdate) SetNillableCreateTime(t *time.Time) *BotUpdate {
	if t != nil {
		bu.SetCreateTime(*t)
	}
	return bu
}

// SetUpdateTime sets the "update_time" field.
func (bu *BotUpdate) SetUpdateTime(t time.Time) *BotUpdate {
	bu.mutation.SetUpdateTime(t)
	return bu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bu *BotUpdate) SetNillableUpdateTime(t *time.Time) *BotUpdate {
	if t != nil {
		bu.SetUpdateTime(*t)
	}
	return bu
}

// Mutation returns the BotMutation object of the builder.
func (bu *BotUpdate) Mutation() *BotMutation {
	return bu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BotUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BotUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BotUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BotUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BotUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(bot.Table, bot.Columns, sqlgraph.NewFieldSpec(bot.FieldID, field.TypeInt64))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.BotName(); ok {
		_spec.SetField(bot.FieldBotName, field.TypeString, value)
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.SetField(bot.FieldStatus, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedStatus(); ok {
		_spec.AddField(bot.FieldStatus, field.TypeInt, value)
	}
	if value, ok := bu.mutation.CreateTime(); ok {
		_spec.SetField(bot.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := bu.mutation.UpdateTime(); ok {
		_spec.SetField(bot.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BotUpdateOne is the builder for updating a single Bot entity.
type BotUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BotMutation
}

// SetBotName sets the "bot_name" field.
func (buo *BotUpdateOne) SetBotName(s string) *BotUpdateOne {
	buo.mutation.SetBotName(s)
	return buo
}

// SetNillableBotName sets the "bot_name" field if the given value is not nil.
func (buo *BotUpdateOne) SetNillableBotName(s *string) *BotUpdateOne {
	if s != nil {
		buo.SetBotName(*s)
	}
	return buo
}

// SetStatus sets the "status" field.
func (buo *BotUpdateOne) SetStatus(i int) *BotUpdateOne {
	buo.mutation.ResetStatus()
	buo.mutation.SetStatus(i)
	return buo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buo *BotUpdateOne) SetNillableStatus(i *int) *BotUpdateOne {
	if i != nil {
		buo.SetStatus(*i)
	}
	return buo
}

// AddStatus adds i to the "status" field.
func (buo *BotUpdateOne) AddStatus(i int) *BotUpdateOne {
	buo.mutation.AddStatus(i)
	return buo
}

// SetCreateTime sets the "create_time" field.
func (buo *BotUpdateOne) SetCreateTime(t time.Time) *BotUpdateOne {
	buo.mutation.SetCreateTime(t)
	return buo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (buo *BotUpdateOne) SetNillableCreateTime(t *time.Time) *BotUpdateOne {
	if t != nil {
		buo.SetCreateTime(*t)
	}
	return buo
}

// SetUpdateTime sets the "update_time" field.
func (buo *BotUpdateOne) SetUpdateTime(t time.Time) *BotUpdateOne {
	buo.mutation.SetUpdateTime(t)
	return buo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (buo *BotUpdateOne) SetNillableUpdateTime(t *time.Time) *BotUpdateOne {
	if t != nil {
		buo.SetUpdateTime(*t)
	}
	return buo
}

// Mutation returns the BotMutation object of the builder.
func (buo *BotUpdateOne) Mutation() *BotMutation {
	return buo.mutation
}

// Where appends a list predicates to the BotUpdate builder.
func (buo *BotUpdateOne) Where(ps ...predicate.Bot) *BotUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BotUpdateOne) Select(field string, fields ...string) *BotUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bot entity.
func (buo *BotUpdateOne) Save(ctx context.Context) (*Bot, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BotUpdateOne) SaveX(ctx context.Context) *Bot {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BotUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BotUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BotUpdateOne) sqlSave(ctx context.Context) (_node *Bot, err error) {
	_spec := sqlgraph.NewUpdateSpec(bot.Table, bot.Columns, sqlgraph.NewFieldSpec(bot.FieldID, field.TypeInt64))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bot.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bot.FieldID)
		for _, f := range fields {
			if !bot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.BotName(); ok {
		_spec.SetField(bot.FieldBotName, field.TypeString, value)
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.SetField(bot.FieldStatus, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedStatus(); ok {
		_spec.AddField(bot.FieldStatus, field.TypeInt, value)
	}
	if value, ok := buo.mutation.CreateTime(); ok {
		_spec.SetField(bot.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := buo.mutation.UpdateTime(); ok {
		_spec.SetField(bot.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &Bot{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
