// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"echo/internal/data/ent/predicate"
	"echo/internal/data/ent/subdouyulive"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubDouyuLiveDelete is the builder for deleting a SubDouyuLive entity.
type SubDouyuLiveDelete struct {
	config
	hooks    []Hook
	mutation *SubDouyuLiveMutation
}

// Where appends a list predicates to the SubDouyuLiveDelete builder.
func (sdld *SubDouyuLiveDelete) Where(ps ...predicate.SubDouyuLive) *SubDouyuLiveDelete {
	sdld.mutation.Where(ps...)
	return sdld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sdld *SubDouyuLiveDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sdld.sqlExec, sdld.mutation, sdld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sdld *SubDouyuLiveDelete) ExecX(ctx context.Context) int {
	n, err := sdld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sdld *SubDouyuLiveDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(subdouyulive.Table, sqlgraph.NewFieldSpec(subdouyulive.FieldID, field.TypeInt64))
	if ps := sdld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sdld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sdld.mutation.done = true
	return affected, err
}

// SubDouyuLiveDeleteOne is the builder for deleting a single SubDouyuLive entity.
type SubDouyuLiveDeleteOne struct {
	sdld *SubDouyuLiveDelete
}

// Where appends a list predicates to the SubDouyuLiveDelete builder.
func (sdldo *SubDouyuLiveDeleteOne) Where(ps ...predicate.SubDouyuLive) *SubDouyuLiveDeleteOne {
	sdldo.sdld.mutation.Where(ps...)
	return sdldo
}

// Exec executes the deletion query.
func (sdldo *SubDouyuLiveDeleteOne) Exec(ctx context.Context) error {
	n, err := sdldo.sdld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{subdouyulive.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sdldo *SubDouyuLiveDeleteOne) ExecX(ctx context.Context) {
	if err := sdldo.Exec(ctx); err != nil {
		panic(err)
	}
}
