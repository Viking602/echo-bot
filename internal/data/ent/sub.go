// Code generated by ent, DO NOT EDIT.

package ent

import (
	"echo/internal/data/ent/sub"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Sub is the model entity for the Sub schema.
type Sub struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// SubType holds the value of the "sub_type" field.
	SubType int64 `json:"sub_type,omitempty"`
	// GroupID holds the value of the "group_id" field.
	GroupID int64 `json:"group_id,omitempty"`
	// SubID holds the value of the "sub_id" field.
	SubID int64 `json:"sub_id,omitempty"`
	// BotID holds the value of the "bot_id" field.
	BotID int64 `json:"bot_id,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sub) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sub.FieldID, sub.FieldSubType, sub.FieldGroupID, sub.FieldSubID, sub.FieldBotID, sub.FieldStatus:
			values[i] = new(sql.NullInt64)
		case sub.FieldCreateTime, sub.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sub fields.
func (s *Sub) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sub.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case sub.FieldSubType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sub_type", values[i])
			} else if value.Valid {
				s.SubType = value.Int64
			}
		case sub.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				s.GroupID = value.Int64
			}
		case sub.FieldSubID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sub_id", values[i])
			} else if value.Valid {
				s.SubID = value.Int64
			}
		case sub.FieldBotID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bot_id", values[i])
			} else if value.Valid {
				s.BotID = value.Int64
			}
		case sub.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = int(value.Int64)
			}
		case sub.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				s.CreateTime = value.Time
			}
		case sub.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				s.UpdateTime = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Sub.
// This includes values selected through modifiers, order, etc.
func (s *Sub) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Sub.
// Note that you need to call Sub.Unwrap() before calling this method if this Sub
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sub) Update() *SubUpdateOne {
	return NewSubClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Sub entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sub) Unwrap() *Sub {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Sub is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sub) String() string {
	var builder strings.Builder
	builder.WriteString("Sub(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("sub_type=")
	builder.WriteString(fmt.Sprintf("%v", s.SubType))
	builder.WriteString(", ")
	builder.WriteString("group_id=")
	builder.WriteString(fmt.Sprintf("%v", s.GroupID))
	builder.WriteString(", ")
	builder.WriteString("sub_id=")
	builder.WriteString(fmt.Sprintf("%v", s.SubID))
	builder.WriteString(", ")
	builder.WriteString("bot_id=")
	builder.WriteString(fmt.Sprintf("%v", s.BotID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(s.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(s.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Subs is a parsable slice of Sub.
type Subs []*Sub
