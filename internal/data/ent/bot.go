// Code generated by ent, DO NOT EDIT.

package ent

import (
	"echo/internal/data/ent/bot"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Bot is the model entity for the Bot schema.
type Bot struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// BotID holds the value of the "bot_id" field.
	BotID int64 `json:"bot_id,omitempty"`
	// BotName holds the value of the "bot_name" field.
	BotName string `json:"bot_name,omitempty"`
	// SelfID holds the value of the "self_id" field.
	SelfID int64 `json:"self_id,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// LastOnlineTime holds the value of the "last_online_time" field.
	LastOnlineTime time.Time `json:"last_online_time,omitempty"`
	// LastOnlineIP holds the value of the "last_online_ip" field.
	LastOnlineIP string `json:"last_online_ip,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bot) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bot.FieldID, bot.FieldBotID, bot.FieldSelfID, bot.FieldStatus:
			values[i] = new(sql.NullInt64)
		case bot.FieldBotName, bot.FieldLastOnlineIP:
			values[i] = new(sql.NullString)
		case bot.FieldLastOnlineTime, bot.FieldCreateTime, bot.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bot fields.
func (b *Bot) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bot.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int64(value.Int64)
		case bot.FieldBotID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bot_id", values[i])
			} else if value.Valid {
				b.BotID = value.Int64
			}
		case bot.FieldBotName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bot_name", values[i])
			} else if value.Valid {
				b.BotName = value.String
			}
		case bot.FieldSelfID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field self_id", values[i])
			} else if value.Valid {
				b.SelfID = value.Int64
			}
		case bot.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				b.Status = int(value.Int64)
			}
		case bot.FieldLastOnlineTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_online_time", values[i])
			} else if value.Valid {
				b.LastOnlineTime = value.Time
			}
		case bot.FieldLastOnlineIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_online_ip", values[i])
			} else if value.Valid {
				b.LastOnlineIP = value.String
			}
		case bot.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				b.CreateTime = value.Time
			}
		case bot.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				b.UpdateTime = value.Time
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Bot.
// This includes values selected through modifiers, order, etc.
func (b *Bot) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// Update returns a builder for updating this Bot.
// Note that you need to call Bot.Unwrap() before calling this method if this Bot
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bot) Update() *BotUpdateOne {
	return NewBotClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Bot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bot) Unwrap() *Bot {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bot is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bot) String() string {
	var builder strings.Builder
	builder.WriteString("Bot(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("bot_id=")
	builder.WriteString(fmt.Sprintf("%v", b.BotID))
	builder.WriteString(", ")
	builder.WriteString("bot_name=")
	builder.WriteString(b.BotName)
	builder.WriteString(", ")
	builder.WriteString("self_id=")
	builder.WriteString(fmt.Sprintf("%v", b.SelfID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", b.Status))
	builder.WriteString(", ")
	builder.WriteString("last_online_time=")
	builder.WriteString(b.LastOnlineTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_online_ip=")
	builder.WriteString(b.LastOnlineIP)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(b.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(b.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Bots is a parsable slice of Bot.
type Bots []*Bot
