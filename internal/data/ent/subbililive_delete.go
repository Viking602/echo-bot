// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"echo/internal/data/ent/predicate"
	"echo/internal/data/ent/subbililive"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubBiliLiveDelete is the builder for deleting a SubBiliLive entity.
type SubBiliLiveDelete struct {
	config
	hooks    []Hook
	mutation *SubBiliLiveMutation
}

// Where appends a list predicates to the SubBiliLiveDelete builder.
func (sbld *SubBiliLiveDelete) Where(ps ...predicate.SubBiliLive) *SubBiliLiveDelete {
	sbld.mutation.Where(ps...)
	return sbld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sbld *SubBiliLiveDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sbld.sqlExec, sbld.mutation, sbld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sbld *SubBiliLiveDelete) ExecX(ctx context.Context) int {
	n, err := sbld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sbld *SubBiliLiveDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(subbililive.Table, sqlgraph.NewFieldSpec(subbililive.FieldID, field.TypeInt64))
	if ps := sbld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sbld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sbld.mutation.done = true
	return affected, err
}

// SubBiliLiveDeleteOne is the builder for deleting a single SubBiliLive entity.
type SubBiliLiveDeleteOne struct {
	sbld *SubBiliLiveDelete
}

// Where appends a list predicates to the SubBiliLiveDelete builder.
func (sbldo *SubBiliLiveDeleteOne) Where(ps ...predicate.SubBiliLive) *SubBiliLiveDeleteOne {
	sbldo.sbld.mutation.Where(ps...)
	return sbldo
}

// Exec executes the deletion query.
func (sbldo *SubBiliLiveDeleteOne) Exec(ctx context.Context) error {
	n, err := sbldo.sbld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{subbililive.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sbldo *SubBiliLiveDeleteOne) ExecX(ctx context.Context) {
	if err := sbldo.Exec(ctx); err != nil {
		panic(err)
	}
}
