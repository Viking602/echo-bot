// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"echo/internal/data/ent/predicate"
	"echo/internal/data/ent/sub"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubUpdate is the builder for updating Sub entities.
type SubUpdate struct {
	config
	hooks    []Hook
	mutation *SubMutation
}

// Where appends a list predicates to the SubUpdate builder.
func (su *SubUpdate) Where(ps ...predicate.Sub) *SubUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetSubType sets the "sub_type" field.
func (su *SubUpdate) SetSubType(i int64) *SubUpdate {
	su.mutation.ResetSubType()
	su.mutation.SetSubType(i)
	return su
}

// SetNillableSubType sets the "sub_type" field if the given value is not nil.
func (su *SubUpdate) SetNillableSubType(i *int64) *SubUpdate {
	if i != nil {
		su.SetSubType(*i)
	}
	return su
}

// AddSubType adds i to the "sub_type" field.
func (su *SubUpdate) AddSubType(i int64) *SubUpdate {
	su.mutation.AddSubType(i)
	return su
}

// SetGroupID sets the "group_id" field.
func (su *SubUpdate) SetGroupID(i int64) *SubUpdate {
	su.mutation.ResetGroupID()
	su.mutation.SetGroupID(i)
	return su
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (su *SubUpdate) SetNillableGroupID(i *int64) *SubUpdate {
	if i != nil {
		su.SetGroupID(*i)
	}
	return su
}

// AddGroupID adds i to the "group_id" field.
func (su *SubUpdate) AddGroupID(i int64) *SubUpdate {
	su.mutation.AddGroupID(i)
	return su
}

// SetSubID sets the "sub_id" field.
func (su *SubUpdate) SetSubID(i int64) *SubUpdate {
	su.mutation.ResetSubID()
	su.mutation.SetSubID(i)
	return su
}

// SetNillableSubID sets the "sub_id" field if the given value is not nil.
func (su *SubUpdate) SetNillableSubID(i *int64) *SubUpdate {
	if i != nil {
		su.SetSubID(*i)
	}
	return su
}

// AddSubID adds i to the "sub_id" field.
func (su *SubUpdate) AddSubID(i int64) *SubUpdate {
	su.mutation.AddSubID(i)
	return su
}

// SetBotID sets the "bot_id" field.
func (su *SubUpdate) SetBotID(i int64) *SubUpdate {
	su.mutation.ResetBotID()
	su.mutation.SetBotID(i)
	return su
}

// SetNillableBotID sets the "bot_id" field if the given value is not nil.
func (su *SubUpdate) SetNillableBotID(i *int64) *SubUpdate {
	if i != nil {
		su.SetBotID(*i)
	}
	return su
}

// AddBotID adds i to the "bot_id" field.
func (su *SubUpdate) AddBotID(i int64) *SubUpdate {
	su.mutation.AddBotID(i)
	return su
}

// SetStatus sets the "status" field.
func (su *SubUpdate) SetStatus(i int) *SubUpdate {
	su.mutation.ResetStatus()
	su.mutation.SetStatus(i)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SubUpdate) SetNillableStatus(i *int) *SubUpdate {
	if i != nil {
		su.SetStatus(*i)
	}
	return su
}

// AddStatus adds i to the "status" field.
func (su *SubUpdate) AddStatus(i int) *SubUpdate {
	su.mutation.AddStatus(i)
	return su
}

// SetCreateTime sets the "create_time" field.
func (su *SubUpdate) SetCreateTime(t time.Time) *SubUpdate {
	su.mutation.SetCreateTime(t)
	return su
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (su *SubUpdate) SetNillableCreateTime(t *time.Time) *SubUpdate {
	if t != nil {
		su.SetCreateTime(*t)
	}
	return su
}

// SetUpdateTime sets the "update_time" field.
func (su *SubUpdate) SetUpdateTime(t time.Time) *SubUpdate {
	su.mutation.SetUpdateTime(t)
	return su
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (su *SubUpdate) SetNillableUpdateTime(t *time.Time) *SubUpdate {
	if t != nil {
		su.SetUpdateTime(*t)
	}
	return su
}

// Mutation returns the SubMutation object of the builder.
func (su *SubUpdate) Mutation() *SubMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SubUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sub.Table, sub.Columns, sqlgraph.NewFieldSpec(sub.FieldID, field.TypeInt64))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.SubType(); ok {
		_spec.SetField(sub.FieldSubType, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedSubType(); ok {
		_spec.AddField(sub.FieldSubType, field.TypeInt64, value)
	}
	if value, ok := su.mutation.GroupID(); ok {
		_spec.SetField(sub.FieldGroupID, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedGroupID(); ok {
		_spec.AddField(sub.FieldGroupID, field.TypeInt64, value)
	}
	if value, ok := su.mutation.SubID(); ok {
		_spec.SetField(sub.FieldSubID, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedSubID(); ok {
		_spec.AddField(sub.FieldSubID, field.TypeInt64, value)
	}
	if value, ok := su.mutation.BotID(); ok {
		_spec.SetField(sub.FieldBotID, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedBotID(); ok {
		_spec.AddField(sub.FieldBotID, field.TypeInt64, value)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(sub.FieldStatus, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedStatus(); ok {
		_spec.AddField(sub.FieldStatus, field.TypeInt, value)
	}
	if value, ok := su.mutation.CreateTime(); ok {
		_spec.SetField(sub.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdateTime(); ok {
		_spec.SetField(sub.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sub.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubUpdateOne is the builder for updating a single Sub entity.
type SubUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubMutation
}

// SetSubType sets the "sub_type" field.
func (suo *SubUpdateOne) SetSubType(i int64) *SubUpdateOne {
	suo.mutation.ResetSubType()
	suo.mutation.SetSubType(i)
	return suo
}

// SetNillableSubType sets the "sub_type" field if the given value is not nil.
func (suo *SubUpdateOne) SetNillableSubType(i *int64) *SubUpdateOne {
	if i != nil {
		suo.SetSubType(*i)
	}
	return suo
}

// AddSubType adds i to the "sub_type" field.
func (suo *SubUpdateOne) AddSubType(i int64) *SubUpdateOne {
	suo.mutation.AddSubType(i)
	return suo
}

// SetGroupID sets the "group_id" field.
func (suo *SubUpdateOne) SetGroupID(i int64) *SubUpdateOne {
	suo.mutation.ResetGroupID()
	suo.mutation.SetGroupID(i)
	return suo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (suo *SubUpdateOne) SetNillableGroupID(i *int64) *SubUpdateOne {
	if i != nil {
		suo.SetGroupID(*i)
	}
	return suo
}

// AddGroupID adds i to the "group_id" field.
func (suo *SubUpdateOne) AddGroupID(i int64) *SubUpdateOne {
	suo.mutation.AddGroupID(i)
	return suo
}

// SetSubID sets the "sub_id" field.
func (suo *SubUpdateOne) SetSubID(i int64) *SubUpdateOne {
	suo.mutation.ResetSubID()
	suo.mutation.SetSubID(i)
	return suo
}

// SetNillableSubID sets the "sub_id" field if the given value is not nil.
func (suo *SubUpdateOne) SetNillableSubID(i *int64) *SubUpdateOne {
	if i != nil {
		suo.SetSubID(*i)
	}
	return suo
}

// AddSubID adds i to the "sub_id" field.
func (suo *SubUpdateOne) AddSubID(i int64) *SubUpdateOne {
	suo.mutation.AddSubID(i)
	return suo
}

// SetBotID sets the "bot_id" field.
func (suo *SubUpdateOne) SetBotID(i int64) *SubUpdateOne {
	suo.mutation.ResetBotID()
	suo.mutation.SetBotID(i)
	return suo
}

// SetNillableBotID sets the "bot_id" field if the given value is not nil.
func (suo *SubUpdateOne) SetNillableBotID(i *int64) *SubUpdateOne {
	if i != nil {
		suo.SetBotID(*i)
	}
	return suo
}

// AddBotID adds i to the "bot_id" field.
func (suo *SubUpdateOne) AddBotID(i int64) *SubUpdateOne {
	suo.mutation.AddBotID(i)
	return suo
}

// SetStatus sets the "status" field.
func (suo *SubUpdateOne) SetStatus(i int) *SubUpdateOne {
	suo.mutation.ResetStatus()
	suo.mutation.SetStatus(i)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SubUpdateOne) SetNillableStatus(i *int) *SubUpdateOne {
	if i != nil {
		suo.SetStatus(*i)
	}
	return suo
}

// AddStatus adds i to the "status" field.
func (suo *SubUpdateOne) AddStatus(i int) *SubUpdateOne {
	suo.mutation.AddStatus(i)
	return suo
}

// SetCreateTime sets the "create_time" field.
func (suo *SubUpdateOne) SetCreateTime(t time.Time) *SubUpdateOne {
	suo.mutation.SetCreateTime(t)
	return suo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (suo *SubUpdateOne) SetNillableCreateTime(t *time.Time) *SubUpdateOne {
	if t != nil {
		suo.SetCreateTime(*t)
	}
	return suo
}

// SetUpdateTime sets the "update_time" field.
func (suo *SubUpdateOne) SetUpdateTime(t time.Time) *SubUpdateOne {
	suo.mutation.SetUpdateTime(t)
	return suo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (suo *SubUpdateOne) SetNillableUpdateTime(t *time.Time) *SubUpdateOne {
	if t != nil {
		suo.SetUpdateTime(*t)
	}
	return suo
}

// Mutation returns the SubMutation object of the builder.
func (suo *SubUpdateOne) Mutation() *SubMutation {
	return suo.mutation
}

// Where appends a list predicates to the SubUpdate builder.
func (suo *SubUpdateOne) Where(ps ...predicate.Sub) *SubUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubUpdateOne) Select(field string, fields ...string) *SubUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Sub entity.
func (suo *SubUpdateOne) Save(ctx context.Context) (*Sub, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubUpdateOne) SaveX(ctx context.Context) *Sub {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SubUpdateOne) sqlSave(ctx context.Context) (_node *Sub, err error) {
	_spec := sqlgraph.NewUpdateSpec(sub.Table, sub.Columns, sqlgraph.NewFieldSpec(sub.FieldID, field.TypeInt64))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Sub.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sub.FieldID)
		for _, f := range fields {
			if !sub.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sub.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.SubType(); ok {
		_spec.SetField(sub.FieldSubType, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedSubType(); ok {
		_spec.AddField(sub.FieldSubType, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.GroupID(); ok {
		_spec.SetField(sub.FieldGroupID, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedGroupID(); ok {
		_spec.AddField(sub.FieldGroupID, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.SubID(); ok {
		_spec.SetField(sub.FieldSubID, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedSubID(); ok {
		_spec.AddField(sub.FieldSubID, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.BotID(); ok {
		_spec.SetField(sub.FieldBotID, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedBotID(); ok {
		_spec.AddField(sub.FieldBotID, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(sub.FieldStatus, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedStatus(); ok {
		_spec.AddField(sub.FieldStatus, field.TypeInt, value)
	}
	if value, ok := suo.mutation.CreateTime(); ok {
		_spec.SetField(sub.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdateTime(); ok {
		_spec.SetField(sub.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &Sub{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sub.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
