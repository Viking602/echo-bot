// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"echo/internal/data/ent/sub"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubCreate is the builder for creating a Sub entity.
type SubCreate struct {
	config
	mutation *SubMutation
	hooks    []Hook
}

// SetSubType sets the "sub_type" field.
func (sc *SubCreate) SetSubType(i int64) *SubCreate {
	sc.mutation.SetSubType(i)
	return sc
}

// SetGroupID sets the "group_id" field.
func (sc *SubCreate) SetGroupID(i int64) *SubCreate {
	sc.mutation.SetGroupID(i)
	return sc
}

// SetSubID sets the "sub_id" field.
func (sc *SubCreate) SetSubID(i int64) *SubCreate {
	sc.mutation.SetSubID(i)
	return sc
}

// SetBotID sets the "bot_id" field.
func (sc *SubCreate) SetBotID(i int64) *SubCreate {
	sc.mutation.SetBotID(i)
	return sc
}

// SetStatus sets the "status" field.
func (sc *SubCreate) SetStatus(i int) *SubCreate {
	sc.mutation.SetStatus(i)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *SubCreate) SetNillableStatus(i *int) *SubCreate {
	if i != nil {
		sc.SetStatus(*i)
	}
	return sc
}

// SetCreateTime sets the "create_time" field.
func (sc *SubCreate) SetCreateTime(t time.Time) *SubCreate {
	sc.mutation.SetCreateTime(t)
	return sc
}

// SetUpdateTime sets the "update_time" field.
func (sc *SubCreate) SetUpdateTime(t time.Time) *SubCreate {
	sc.mutation.SetUpdateTime(t)
	return sc
}

// SetID sets the "id" field.
func (sc *SubCreate) SetID(i int64) *SubCreate {
	sc.mutation.SetID(i)
	return sc
}

// Mutation returns the SubMutation object of the builder.
func (sc *SubCreate) Mutation() *SubMutation {
	return sc.mutation
}

// Save creates the Sub in the database.
func (sc *SubCreate) Save(ctx context.Context) (*Sub, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubCreate) SaveX(ctx context.Context) *Sub {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SubCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SubCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SubCreate) defaults() {
	if _, ok := sc.mutation.Status(); !ok {
		v := sub.DefaultStatus
		sc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SubCreate) check() error {
	if _, ok := sc.mutation.SubType(); !ok {
		return &ValidationError{Name: "sub_type", err: errors.New(`ent: missing required field "Sub.sub_type"`)}
	}
	if _, ok := sc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group_id", err: errors.New(`ent: missing required field "Sub.group_id"`)}
	}
	if _, ok := sc.mutation.SubID(); !ok {
		return &ValidationError{Name: "sub_id", err: errors.New(`ent: missing required field "Sub.sub_id"`)}
	}
	if _, ok := sc.mutation.BotID(); !ok {
		return &ValidationError{Name: "bot_id", err: errors.New(`ent: missing required field "Sub.bot_id"`)}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Sub.status"`)}
	}
	if _, ok := sc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Sub.create_time"`)}
	}
	if _, ok := sc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Sub.update_time"`)}
	}
	return nil
}

func (sc *SubCreate) sqlSave(ctx context.Context) (*Sub, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SubCreate) createSpec() (*Sub, *sqlgraph.CreateSpec) {
	var (
		_node = &Sub{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(sub.Table, sqlgraph.NewFieldSpec(sub.FieldID, field.TypeInt64))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.SubType(); ok {
		_spec.SetField(sub.FieldSubType, field.TypeInt64, value)
		_node.SubType = value
	}
	if value, ok := sc.mutation.GroupID(); ok {
		_spec.SetField(sub.FieldGroupID, field.TypeInt64, value)
		_node.GroupID = value
	}
	if value, ok := sc.mutation.SubID(); ok {
		_spec.SetField(sub.FieldSubID, field.TypeInt64, value)
		_node.SubID = value
	}
	if value, ok := sc.mutation.BotID(); ok {
		_spec.SetField(sub.FieldBotID, field.TypeInt64, value)
		_node.BotID = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(sub.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := sc.mutation.CreateTime(); ok {
		_spec.SetField(sub.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := sc.mutation.UpdateTime(); ok {
		_spec.SetField(sub.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// SubCreateBulk is the builder for creating many Sub entities in bulk.
type SubCreateBulk struct {
	config
	err      error
	builders []*SubCreate
}

// Save creates the Sub entities in the database.
func (scb *SubCreateBulk) Save(ctx context.Context) ([]*Sub, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Sub, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SubCreateBulk) SaveX(ctx context.Context) []*Sub {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SubCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SubCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
