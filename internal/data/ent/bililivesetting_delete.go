// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"echo/internal/data/ent/bililivesetting"
	"echo/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BiliLiveSettingDelete is the builder for deleting a BiliLiveSetting entity.
type BiliLiveSettingDelete struct {
	config
	hooks    []Hook
	mutation *BiliLiveSettingMutation
}

// Where appends a list predicates to the BiliLiveSettingDelete builder.
func (blsd *BiliLiveSettingDelete) Where(ps ...predicate.BiliLiveSetting) *BiliLiveSettingDelete {
	blsd.mutation.Where(ps...)
	return blsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (blsd *BiliLiveSettingDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, blsd.sqlExec, blsd.mutation, blsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (blsd *BiliLiveSettingDelete) ExecX(ctx context.Context) int {
	n, err := blsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (blsd *BiliLiveSettingDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(bililivesetting.Table, sqlgraph.NewFieldSpec(bililivesetting.FieldID, field.TypeInt64))
	if ps := blsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, blsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	blsd.mutation.done = true
	return affected, err
}

// BiliLiveSettingDeleteOne is the builder for deleting a single BiliLiveSetting entity.
type BiliLiveSettingDeleteOne struct {
	blsd *BiliLiveSettingDelete
}

// Where appends a list predicates to the BiliLiveSettingDelete builder.
func (blsdo *BiliLiveSettingDeleteOne) Where(ps ...predicate.BiliLiveSetting) *BiliLiveSettingDeleteOne {
	blsdo.blsd.mutation.Where(ps...)
	return blsdo
}

// Exec executes the deletion query.
func (blsdo *BiliLiveSettingDeleteOne) Exec(ctx context.Context) error {
	n, err := blsdo.blsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{bililivesetting.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (blsdo *BiliLiveSettingDeleteOne) ExecX(ctx context.Context) {
	if err := blsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
