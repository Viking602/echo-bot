// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"echo/internal/data/ent/bililivesetting"
	"echo/internal/data/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BiliLiveSettingUpdate is the builder for updating BiliLiveSetting entities.
type BiliLiveSettingUpdate struct {
	config
	hooks    []Hook
	mutation *BiliLiveSettingMutation
}

// Where appends a list predicates to the BiliLiveSettingUpdate builder.
func (blsu *BiliLiveSettingUpdate) Where(ps ...predicate.BiliLiveSetting) *BiliLiveSettingUpdate {
	blsu.mutation.Where(ps...)
	return blsu
}

// SetRoomID sets the "room_id" field.
func (blsu *BiliLiveSettingUpdate) SetRoomID(i int64) *BiliLiveSettingUpdate {
	blsu.mutation.ResetRoomID()
	blsu.mutation.SetRoomID(i)
	return blsu
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (blsu *BiliLiveSettingUpdate) SetNillableRoomID(i *int64) *BiliLiveSettingUpdate {
	if i != nil {
		blsu.SetRoomID(*i)
	}
	return blsu
}

// AddRoomID adds i to the "room_id" field.
func (blsu *BiliLiveSettingUpdate) AddRoomID(i int64) *BiliLiveSettingUpdate {
	blsu.mutation.AddRoomID(i)
	return blsu
}

// SetLiveState sets the "live_state" field.
func (blsu *BiliLiveSettingUpdate) SetLiveState(i int64) *BiliLiveSettingUpdate {
	blsu.mutation.ResetLiveState()
	blsu.mutation.SetLiveState(i)
	return blsu
}

// SetNillableLiveState sets the "live_state" field if the given value is not nil.
func (blsu *BiliLiveSettingUpdate) SetNillableLiveState(i *int64) *BiliLiveSettingUpdate {
	if i != nil {
		blsu.SetLiveState(*i)
	}
	return blsu
}

// AddLiveState adds i to the "live_state" field.
func (blsu *BiliLiveSettingUpdate) AddLiveState(i int64) *BiliLiveSettingUpdate {
	blsu.mutation.AddLiveState(i)
	return blsu
}

// SetLiveStartTime sets the "live_start_time" field.
func (blsu *BiliLiveSettingUpdate) SetLiveStartTime(t time.Time) *BiliLiveSettingUpdate {
	blsu.mutation.SetLiveStartTime(t)
	return blsu
}

// SetNillableLiveStartTime sets the "live_start_time" field if the given value is not nil.
func (blsu *BiliLiveSettingUpdate) SetNillableLiveStartTime(t *time.Time) *BiliLiveSettingUpdate {
	if t != nil {
		blsu.SetLiveStartTime(*t)
	}
	return blsu
}

// SetLiveEndTime sets the "live_end_time" field.
func (blsu *BiliLiveSettingUpdate) SetLiveEndTime(t time.Time) *BiliLiveSettingUpdate {
	blsu.mutation.SetLiveEndTime(t)
	return blsu
}

// SetNillableLiveEndTime sets the "live_end_time" field if the given value is not nil.
func (blsu *BiliLiveSettingUpdate) SetNillableLiveEndTime(t *time.Time) *BiliLiveSettingUpdate {
	if t != nil {
		blsu.SetLiveEndTime(*t)
	}
	return blsu
}

// SetCreateTime sets the "create_time" field.
func (blsu *BiliLiveSettingUpdate) SetCreateTime(t time.Time) *BiliLiveSettingUpdate {
	blsu.mutation.SetCreateTime(t)
	return blsu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (blsu *BiliLiveSettingUpdate) SetNillableCreateTime(t *time.Time) *BiliLiveSettingUpdate {
	if t != nil {
		blsu.SetCreateTime(*t)
	}
	return blsu
}

// SetUpdateTime sets the "update_time" field.
func (blsu *BiliLiveSettingUpdate) SetUpdateTime(t time.Time) *BiliLiveSettingUpdate {
	blsu.mutation.SetUpdateTime(t)
	return blsu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (blsu *BiliLiveSettingUpdate) SetNillableUpdateTime(t *time.Time) *BiliLiveSettingUpdate {
	if t != nil {
		blsu.SetUpdateTime(*t)
	}
	return blsu
}

// Mutation returns the BiliLiveSettingMutation object of the builder.
func (blsu *BiliLiveSettingUpdate) Mutation() *BiliLiveSettingMutation {
	return blsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (blsu *BiliLiveSettingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, blsu.sqlSave, blsu.mutation, blsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (blsu *BiliLiveSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := blsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (blsu *BiliLiveSettingUpdate) Exec(ctx context.Context) error {
	_, err := blsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (blsu *BiliLiveSettingUpdate) ExecX(ctx context.Context) {
	if err := blsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (blsu *BiliLiveSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(bililivesetting.Table, bililivesetting.Columns, sqlgraph.NewFieldSpec(bililivesetting.FieldID, field.TypeInt64))
	if ps := blsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := blsu.mutation.RoomID(); ok {
		_spec.SetField(bililivesetting.FieldRoomID, field.TypeInt64, value)
	}
	if value, ok := blsu.mutation.AddedRoomID(); ok {
		_spec.AddField(bililivesetting.FieldRoomID, field.TypeInt64, value)
	}
	if value, ok := blsu.mutation.LiveState(); ok {
		_spec.SetField(bililivesetting.FieldLiveState, field.TypeInt64, value)
	}
	if value, ok := blsu.mutation.AddedLiveState(); ok {
		_spec.AddField(bililivesetting.FieldLiveState, field.TypeInt64, value)
	}
	if value, ok := blsu.mutation.LiveStartTime(); ok {
		_spec.SetField(bililivesetting.FieldLiveStartTime, field.TypeTime, value)
	}
	if value, ok := blsu.mutation.LiveEndTime(); ok {
		_spec.SetField(bililivesetting.FieldLiveEndTime, field.TypeTime, value)
	}
	if value, ok := blsu.mutation.CreateTime(); ok {
		_spec.SetField(bililivesetting.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := blsu.mutation.UpdateTime(); ok {
		_spec.SetField(bililivesetting.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, blsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bililivesetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	blsu.mutation.done = true
	return n, nil
}

// BiliLiveSettingUpdateOne is the builder for updating a single BiliLiveSetting entity.
type BiliLiveSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BiliLiveSettingMutation
}

// SetRoomID sets the "room_id" field.
func (blsuo *BiliLiveSettingUpdateOne) SetRoomID(i int64) *BiliLiveSettingUpdateOne {
	blsuo.mutation.ResetRoomID()
	blsuo.mutation.SetRoomID(i)
	return blsuo
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (blsuo *BiliLiveSettingUpdateOne) SetNillableRoomID(i *int64) *BiliLiveSettingUpdateOne {
	if i != nil {
		blsuo.SetRoomID(*i)
	}
	return blsuo
}

// AddRoomID adds i to the "room_id" field.
func (blsuo *BiliLiveSettingUpdateOne) AddRoomID(i int64) *BiliLiveSettingUpdateOne {
	blsuo.mutation.AddRoomID(i)
	return blsuo
}

// SetLiveState sets the "live_state" field.
func (blsuo *BiliLiveSettingUpdateOne) SetLiveState(i int64) *BiliLiveSettingUpdateOne {
	blsuo.mutation.ResetLiveState()
	blsuo.mutation.SetLiveState(i)
	return blsuo
}

// SetNillableLiveState sets the "live_state" field if the given value is not nil.
func (blsuo *BiliLiveSettingUpdateOne) SetNillableLiveState(i *int64) *BiliLiveSettingUpdateOne {
	if i != nil {
		blsuo.SetLiveState(*i)
	}
	return blsuo
}

// AddLiveState adds i to the "live_state" field.
func (blsuo *BiliLiveSettingUpdateOne) AddLiveState(i int64) *BiliLiveSettingUpdateOne {
	blsuo.mutation.AddLiveState(i)
	return blsuo
}

// SetLiveStartTime sets the "live_start_time" field.
func (blsuo *BiliLiveSettingUpdateOne) SetLiveStartTime(t time.Time) *BiliLiveSettingUpdateOne {
	blsuo.mutation.SetLiveStartTime(t)
	return blsuo
}

// SetNillableLiveStartTime sets the "live_start_time" field if the given value is not nil.
func (blsuo *BiliLiveSettingUpdateOne) SetNillableLiveStartTime(t *time.Time) *BiliLiveSettingUpdateOne {
	if t != nil {
		blsuo.SetLiveStartTime(*t)
	}
	return blsuo
}

// SetLiveEndTime sets the "live_end_time" field.
func (blsuo *BiliLiveSettingUpdateOne) SetLiveEndTime(t time.Time) *BiliLiveSettingUpdateOne {
	blsuo.mutation.SetLiveEndTime(t)
	return blsuo
}

// SetNillableLiveEndTime sets the "live_end_time" field if the given value is not nil.
func (blsuo *BiliLiveSettingUpdateOne) SetNillableLiveEndTime(t *time.Time) *BiliLiveSettingUpdateOne {
	if t != nil {
		blsuo.SetLiveEndTime(*t)
	}
	return blsuo
}

// SetCreateTime sets the "create_time" field.
func (blsuo *BiliLiveSettingUpdateOne) SetCreateTime(t time.Time) *BiliLiveSettingUpdateOne {
	blsuo.mutation.SetCreateTime(t)
	return blsuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (blsuo *BiliLiveSettingUpdateOne) SetNillableCreateTime(t *time.Time) *BiliLiveSettingUpdateOne {
	if t != nil {
		blsuo.SetCreateTime(*t)
	}
	return blsuo
}

// SetUpdateTime sets the "update_time" field.
func (blsuo *BiliLiveSettingUpdateOne) SetUpdateTime(t time.Time) *BiliLiveSettingUpdateOne {
	blsuo.mutation.SetUpdateTime(t)
	return blsuo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (blsuo *BiliLiveSettingUpdateOne) SetNillableUpdateTime(t *time.Time) *BiliLiveSettingUpdateOne {
	if t != nil {
		blsuo.SetUpdateTime(*t)
	}
	return blsuo
}

// Mutation returns the BiliLiveSettingMutation object of the builder.
func (blsuo *BiliLiveSettingUpdateOne) Mutation() *BiliLiveSettingMutation {
	return blsuo.mutation
}

// Where appends a list predicates to the BiliLiveSettingUpdate builder.
func (blsuo *BiliLiveSettingUpdateOne) Where(ps ...predicate.BiliLiveSetting) *BiliLiveSettingUpdateOne {
	blsuo.mutation.Where(ps...)
	return blsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (blsuo *BiliLiveSettingUpdateOne) Select(field string, fields ...string) *BiliLiveSettingUpdateOne {
	blsuo.fields = append([]string{field}, fields...)
	return blsuo
}

// Save executes the query and returns the updated BiliLiveSetting entity.
func (blsuo *BiliLiveSettingUpdateOne) Save(ctx context.Context) (*BiliLiveSetting, error) {
	return withHooks(ctx, blsuo.sqlSave, blsuo.mutation, blsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (blsuo *BiliLiveSettingUpdateOne) SaveX(ctx context.Context) *BiliLiveSetting {
	node, err := blsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (blsuo *BiliLiveSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := blsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (blsuo *BiliLiveSettingUpdateOne) ExecX(ctx context.Context) {
	if err := blsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (blsuo *BiliLiveSettingUpdateOne) sqlSave(ctx context.Context) (_node *BiliLiveSetting, err error) {
	_spec := sqlgraph.NewUpdateSpec(bililivesetting.Table, bililivesetting.Columns, sqlgraph.NewFieldSpec(bililivesetting.FieldID, field.TypeInt64))
	id, ok := blsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BiliLiveSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := blsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bililivesetting.FieldID)
		for _, f := range fields {
			if !bililivesetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bililivesetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := blsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := blsuo.mutation.RoomID(); ok {
		_spec.SetField(bililivesetting.FieldRoomID, field.TypeInt64, value)
	}
	if value, ok := blsuo.mutation.AddedRoomID(); ok {
		_spec.AddField(bililivesetting.FieldRoomID, field.TypeInt64, value)
	}
	if value, ok := blsuo.mutation.LiveState(); ok {
		_spec.SetField(bililivesetting.FieldLiveState, field.TypeInt64, value)
	}
	if value, ok := blsuo.mutation.AddedLiveState(); ok {
		_spec.AddField(bililivesetting.FieldLiveState, field.TypeInt64, value)
	}
	if value, ok := blsuo.mutation.LiveStartTime(); ok {
		_spec.SetField(bililivesetting.FieldLiveStartTime, field.TypeTime, value)
	}
	if value, ok := blsuo.mutation.LiveEndTime(); ok {
		_spec.SetField(bililivesetting.FieldLiveEndTime, field.TypeTime, value)
	}
	if value, ok := blsuo.mutation.CreateTime(); ok {
		_spec.SetField(bililivesetting.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := blsuo.mutation.UpdateTime(); ok {
		_spec.SetField(bililivesetting.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &BiliLiveSetting{config: blsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, blsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bililivesetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	blsuo.mutation.done = true
	return _node, nil
}
