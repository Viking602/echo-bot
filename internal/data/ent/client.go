// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"echo/internal/data/ent/migrate"

	"echo/internal/data/ent/bot"
	"echo/internal/data/ent/sub"
	"echo/internal/data/ent/subbililive"
	"echo/internal/data/ent/subdouyulive"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Bot is the client for interacting with the Bot builders.
	Bot *BotClient
	// Sub is the client for interacting with the Sub builders.
	Sub *SubClient
	// SubBiliLive is the client for interacting with the SubBiliLive builders.
	SubBiliLive *SubBiliLiveClient
	// SubDouyuLive is the client for interacting with the SubDouyuLive builders.
	SubDouyuLive *SubDouyuLiveClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Bot = NewBotClient(c.config)
	c.Sub = NewSubClient(c.config)
	c.SubBiliLive = NewSubBiliLiveClient(c.config)
	c.SubDouyuLive = NewSubDouyuLiveClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Bot:          NewBotClient(cfg),
		Sub:          NewSubClient(cfg),
		SubBiliLive:  NewSubBiliLiveClient(cfg),
		SubDouyuLive: NewSubDouyuLiveClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Bot:          NewBotClient(cfg),
		Sub:          NewSubClient(cfg),
		SubBiliLive:  NewSubBiliLiveClient(cfg),
		SubDouyuLive: NewSubDouyuLiveClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Bot.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Bot.Use(hooks...)
	c.Sub.Use(hooks...)
	c.SubBiliLive.Use(hooks...)
	c.SubDouyuLive.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Bot.Intercept(interceptors...)
	c.Sub.Intercept(interceptors...)
	c.SubBiliLive.Intercept(interceptors...)
	c.SubDouyuLive.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BotMutation:
		return c.Bot.mutate(ctx, m)
	case *SubMutation:
		return c.Sub.mutate(ctx, m)
	case *SubBiliLiveMutation:
		return c.SubBiliLive.mutate(ctx, m)
	case *SubDouyuLiveMutation:
		return c.SubDouyuLive.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BotClient is a client for the Bot schema.
type BotClient struct {
	config
}

// NewBotClient returns a client for the Bot from the given config.
func NewBotClient(c config) *BotClient {
	return &BotClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bot.Hooks(f(g(h())))`.
func (c *BotClient) Use(hooks ...Hook) {
	c.hooks.Bot = append(c.hooks.Bot, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bot.Intercept(f(g(h())))`.
func (c *BotClient) Intercept(interceptors ...Interceptor) {
	c.inters.Bot = append(c.inters.Bot, interceptors...)
}

// Create returns a builder for creating a Bot entity.
func (c *BotClient) Create() *BotCreate {
	mutation := newBotMutation(c.config, OpCreate)
	return &BotCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Bot entities.
func (c *BotClient) CreateBulk(builders ...*BotCreate) *BotCreateBulk {
	return &BotCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BotClient) MapCreateBulk(slice any, setFunc func(*BotCreate, int)) *BotCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BotCreateBulk{err: fmt.Errorf("calling to BotClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BotCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BotCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Bot.
func (c *BotClient) Update() *BotUpdate {
	mutation := newBotMutation(c.config, OpUpdate)
	return &BotUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BotClient) UpdateOne(b *Bot) *BotUpdateOne {
	mutation := newBotMutation(c.config, OpUpdateOne, withBot(b))
	return &BotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BotClient) UpdateOneID(id int64) *BotUpdateOne {
	mutation := newBotMutation(c.config, OpUpdateOne, withBotID(id))
	return &BotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bot.
func (c *BotClient) Delete() *BotDelete {
	mutation := newBotMutation(c.config, OpDelete)
	return &BotDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BotClient) DeleteOne(b *Bot) *BotDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BotClient) DeleteOneID(id int64) *BotDeleteOne {
	builder := c.Delete().Where(bot.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BotDeleteOne{builder}
}

// Query returns a query builder for Bot.
func (c *BotClient) Query() *BotQuery {
	return &BotQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBot},
		inters: c.Interceptors(),
	}
}

// Get returns a Bot entity by its id.
func (c *BotClient) Get(ctx context.Context, id int64) (*Bot, error) {
	return c.Query().Where(bot.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BotClient) GetX(ctx context.Context, id int64) *Bot {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BotClient) Hooks() []Hook {
	return c.hooks.Bot
}

// Interceptors returns the client interceptors.
func (c *BotClient) Interceptors() []Interceptor {
	return c.inters.Bot
}

func (c *BotClient) mutate(ctx context.Context, m *BotMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BotCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BotUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BotUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BotDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Bot mutation op: %q", m.Op())
	}
}

// SubClient is a client for the Sub schema.
type SubClient struct {
	config
}

// NewSubClient returns a client for the Sub from the given config.
func NewSubClient(c config) *SubClient {
	return &SubClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sub.Hooks(f(g(h())))`.
func (c *SubClient) Use(hooks ...Hook) {
	c.hooks.Sub = append(c.hooks.Sub, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sub.Intercept(f(g(h())))`.
func (c *SubClient) Intercept(interceptors ...Interceptor) {
	c.inters.Sub = append(c.inters.Sub, interceptors...)
}

// Create returns a builder for creating a Sub entity.
func (c *SubClient) Create() *SubCreate {
	mutation := newSubMutation(c.config, OpCreate)
	return &SubCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Sub entities.
func (c *SubClient) CreateBulk(builders ...*SubCreate) *SubCreateBulk {
	return &SubCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubClient) MapCreateBulk(slice any, setFunc func(*SubCreate, int)) *SubCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubCreateBulk{err: fmt.Errorf("calling to SubClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Sub.
func (c *SubClient) Update() *SubUpdate {
	mutation := newSubMutation(c.config, OpUpdate)
	return &SubUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubClient) UpdateOne(s *Sub) *SubUpdateOne {
	mutation := newSubMutation(c.config, OpUpdateOne, withSub(s))
	return &SubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubClient) UpdateOneID(id int64) *SubUpdateOne {
	mutation := newSubMutation(c.config, OpUpdateOne, withSubID(id))
	return &SubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Sub.
func (c *SubClient) Delete() *SubDelete {
	mutation := newSubMutation(c.config, OpDelete)
	return &SubDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubClient) DeleteOne(s *Sub) *SubDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubClient) DeleteOneID(id int64) *SubDeleteOne {
	builder := c.Delete().Where(sub.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubDeleteOne{builder}
}

// Query returns a query builder for Sub.
func (c *SubClient) Query() *SubQuery {
	return &SubQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSub},
		inters: c.Interceptors(),
	}
}

// Get returns a Sub entity by its id.
func (c *SubClient) Get(ctx context.Context, id int64) (*Sub, error) {
	return c.Query().Where(sub.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubClient) GetX(ctx context.Context, id int64) *Sub {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SubClient) Hooks() []Hook {
	return c.hooks.Sub
}

// Interceptors returns the client interceptors.
func (c *SubClient) Interceptors() []Interceptor {
	return c.inters.Sub
}

func (c *SubClient) mutate(ctx context.Context, m *SubMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Sub mutation op: %q", m.Op())
	}
}

// SubBiliLiveClient is a client for the SubBiliLive schema.
type SubBiliLiveClient struct {
	config
}

// NewSubBiliLiveClient returns a client for the SubBiliLive from the given config.
func NewSubBiliLiveClient(c config) *SubBiliLiveClient {
	return &SubBiliLiveClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subbililive.Hooks(f(g(h())))`.
func (c *SubBiliLiveClient) Use(hooks ...Hook) {
	c.hooks.SubBiliLive = append(c.hooks.SubBiliLive, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subbililive.Intercept(f(g(h())))`.
func (c *SubBiliLiveClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubBiliLive = append(c.inters.SubBiliLive, interceptors...)
}

// Create returns a builder for creating a SubBiliLive entity.
func (c *SubBiliLiveClient) Create() *SubBiliLiveCreate {
	mutation := newSubBiliLiveMutation(c.config, OpCreate)
	return &SubBiliLiveCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubBiliLive entities.
func (c *SubBiliLiveClient) CreateBulk(builders ...*SubBiliLiveCreate) *SubBiliLiveCreateBulk {
	return &SubBiliLiveCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubBiliLiveClient) MapCreateBulk(slice any, setFunc func(*SubBiliLiveCreate, int)) *SubBiliLiveCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubBiliLiveCreateBulk{err: fmt.Errorf("calling to SubBiliLiveClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubBiliLiveCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubBiliLiveCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubBiliLive.
func (c *SubBiliLiveClient) Update() *SubBiliLiveUpdate {
	mutation := newSubBiliLiveMutation(c.config, OpUpdate)
	return &SubBiliLiveUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubBiliLiveClient) UpdateOne(sbl *SubBiliLive) *SubBiliLiveUpdateOne {
	mutation := newSubBiliLiveMutation(c.config, OpUpdateOne, withSubBiliLive(sbl))
	return &SubBiliLiveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubBiliLiveClient) UpdateOneID(id int64) *SubBiliLiveUpdateOne {
	mutation := newSubBiliLiveMutation(c.config, OpUpdateOne, withSubBiliLiveID(id))
	return &SubBiliLiveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubBiliLive.
func (c *SubBiliLiveClient) Delete() *SubBiliLiveDelete {
	mutation := newSubBiliLiveMutation(c.config, OpDelete)
	return &SubBiliLiveDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubBiliLiveClient) DeleteOne(sbl *SubBiliLive) *SubBiliLiveDeleteOne {
	return c.DeleteOneID(sbl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubBiliLiveClient) DeleteOneID(id int64) *SubBiliLiveDeleteOne {
	builder := c.Delete().Where(subbililive.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubBiliLiveDeleteOne{builder}
}

// Query returns a query builder for SubBiliLive.
func (c *SubBiliLiveClient) Query() *SubBiliLiveQuery {
	return &SubBiliLiveQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubBiliLive},
		inters: c.Interceptors(),
	}
}

// Get returns a SubBiliLive entity by its id.
func (c *SubBiliLiveClient) Get(ctx context.Context, id int64) (*SubBiliLive, error) {
	return c.Query().Where(subbililive.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubBiliLiveClient) GetX(ctx context.Context, id int64) *SubBiliLive {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SubBiliLiveClient) Hooks() []Hook {
	return c.hooks.SubBiliLive
}

// Interceptors returns the client interceptors.
func (c *SubBiliLiveClient) Interceptors() []Interceptor {
	return c.inters.SubBiliLive
}

func (c *SubBiliLiveClient) mutate(ctx context.Context, m *SubBiliLiveMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubBiliLiveCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubBiliLiveUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubBiliLiveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubBiliLiveDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SubBiliLive mutation op: %q", m.Op())
	}
}

// SubDouyuLiveClient is a client for the SubDouyuLive schema.
type SubDouyuLiveClient struct {
	config
}

// NewSubDouyuLiveClient returns a client for the SubDouyuLive from the given config.
func NewSubDouyuLiveClient(c config) *SubDouyuLiveClient {
	return &SubDouyuLiveClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subdouyulive.Hooks(f(g(h())))`.
func (c *SubDouyuLiveClient) Use(hooks ...Hook) {
	c.hooks.SubDouyuLive = append(c.hooks.SubDouyuLive, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subdouyulive.Intercept(f(g(h())))`.
func (c *SubDouyuLiveClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubDouyuLive = append(c.inters.SubDouyuLive, interceptors...)
}

// Create returns a builder for creating a SubDouyuLive entity.
func (c *SubDouyuLiveClient) Create() *SubDouyuLiveCreate {
	mutation := newSubDouyuLiveMutation(c.config, OpCreate)
	return &SubDouyuLiveCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubDouyuLive entities.
func (c *SubDouyuLiveClient) CreateBulk(builders ...*SubDouyuLiveCreate) *SubDouyuLiveCreateBulk {
	return &SubDouyuLiveCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubDouyuLiveClient) MapCreateBulk(slice any, setFunc func(*SubDouyuLiveCreate, int)) *SubDouyuLiveCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubDouyuLiveCreateBulk{err: fmt.Errorf("calling to SubDouyuLiveClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubDouyuLiveCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubDouyuLiveCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubDouyuLive.
func (c *SubDouyuLiveClient) Update() *SubDouyuLiveUpdate {
	mutation := newSubDouyuLiveMutation(c.config, OpUpdate)
	return &SubDouyuLiveUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubDouyuLiveClient) UpdateOne(sdl *SubDouyuLive) *SubDouyuLiveUpdateOne {
	mutation := newSubDouyuLiveMutation(c.config, OpUpdateOne, withSubDouyuLive(sdl))
	return &SubDouyuLiveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubDouyuLiveClient) UpdateOneID(id int64) *SubDouyuLiveUpdateOne {
	mutation := newSubDouyuLiveMutation(c.config, OpUpdateOne, withSubDouyuLiveID(id))
	return &SubDouyuLiveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubDouyuLive.
func (c *SubDouyuLiveClient) Delete() *SubDouyuLiveDelete {
	mutation := newSubDouyuLiveMutation(c.config, OpDelete)
	return &SubDouyuLiveDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubDouyuLiveClient) DeleteOne(sdl *SubDouyuLive) *SubDouyuLiveDeleteOne {
	return c.DeleteOneID(sdl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubDouyuLiveClient) DeleteOneID(id int64) *SubDouyuLiveDeleteOne {
	builder := c.Delete().Where(subdouyulive.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubDouyuLiveDeleteOne{builder}
}

// Query returns a query builder for SubDouyuLive.
func (c *SubDouyuLiveClient) Query() *SubDouyuLiveQuery {
	return &SubDouyuLiveQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubDouyuLive},
		inters: c.Interceptors(),
	}
}

// Get returns a SubDouyuLive entity by its id.
func (c *SubDouyuLiveClient) Get(ctx context.Context, id int64) (*SubDouyuLive, error) {
	return c.Query().Where(subdouyulive.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubDouyuLiveClient) GetX(ctx context.Context, id int64) *SubDouyuLive {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SubDouyuLiveClient) Hooks() []Hook {
	return c.hooks.SubDouyuLive
}

// Interceptors returns the client interceptors.
func (c *SubDouyuLiveClient) Interceptors() []Interceptor {
	return c.inters.SubDouyuLive
}

func (c *SubDouyuLiveClient) mutate(ctx context.Context, m *SubDouyuLiveMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubDouyuLiveCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubDouyuLiveUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubDouyuLiveUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubDouyuLiveDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SubDouyuLive mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Bot, Sub, SubBiliLive, SubDouyuLive []ent.Hook
	}
	inters struct {
		Bot, Sub, SubBiliLive, SubDouyuLive []ent.Interceptor
	}
)
